#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('mongodb-status-checker:server');
var http = require('http');
let socket = require('socket.io');
const mongoose = require('mongoose');

let mongoConnectStatus = {text: 'Connecting...', alert: 'default'};
let appTerminateStatus = false;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3991');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Terminate app
 */
function terminate() {
  debug("Terminating app in 15 seconds");
  appTerminateStatus = true;
  let terminateTimeout = setTimeout(function(){
    if (appTerminateStatus) {
    process.exit();
    }
  }, 15*1000)
}

/**
 * Connect to db
 */
 const dbConnString = 'mongodb://dbusers:dbpass@localhost:27017/db'; // UPDATE THIS

 mongoose.connect(dbConnString, {useNewUrlParser: true, useUnifiedTopology: true})
    .catch((error)=>{ debug(error); mongoConnectStatus={text: "Unable to connect", alert:"warning", message: error.message}; terminate(); });
 const db = mongoose.connection;

/**
 * Handle db events
 */
db.on('error', err => {
  mongoConnectStatus = {text:'Connection error',alert:"warning", message: err.message};
});
db.on('disconnected', err => {
  mongoConnectStatus = {text:'Disconnected',alert:"warning"};
  terminate();
});
db.on('connecting', function() {
  mongoConnectStatus = {text:'Connecting...',alert:"default"};
})
db.on('reconnected', function() {
  mongoConnectStatus = {text:'Reconnected',alert:"success"};
  appTerminateStatus = false;
})
db.on('open', function() {
  mongoConnectStatus = {text:'Connected',alert:"success"};
})
db.on('disconnecting', err => {
  mongoConnectStatus = {text:'Disconnecting...',alert:"warning"};
});
db.on('close', function() {
  mongoConnectStatus = {text:'Closed',alert:"warning"};
})

/**
 * Mount socket.io
 */
const io = new socket.Server(server);

io.on('connection', (socket) => {
  setInterval(()=>{
    io.emit('mongodb status', mongoConnectStatus);
    io.emit('terminate status', {status: appTerminateStatus});
  }, 1500)
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
